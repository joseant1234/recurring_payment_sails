doctype html
html
  head
    if locals.title
      title= title
    else
      title New Sails App

    // Viewport mobile tag for sensible mobile support
    meta(name="viewport",content="width=device-width, initial-scale=1, maximum-scale=1")

    //-
      Stylesheets and Preprocessors
      ==============================

      You can always bring in CSS files manually with `<link>` tags, or asynchronously
      using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
      of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, stylesheets from your `assets/styles` folder are included
      here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
      are supported. In production, your styles will be minified and concatenated into
      a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your CSS files
          + Import stylesheets from other directories
          + Use a different or additional preprocessor, like SASS, SCSS or Stylus

    // STYLES
    link(rel="stylesheet", href="/styles/bootstrap.css")
    link(rel="stylesheet", href="/styles/importer.css")
    link(rel="stylesheet", href="/styles/style.css")
    // STYLES END

    block styles

  body
    nav.navbar.navbar-default
      .container-fluid
        .navbar-header
            button.navbar-toggle.collapsed(type='button' data-toggle='collapse' aria-expanded='false' data-target='#main-nav')
                span.sr-only Toggle navigation
                span.icon-bar
                span.icon-bar
                span.icon-bar
            a.navbar-brand(href='/') LibrosDemo
          .collapse.navbar-collapse#main-nav
            ul.nav.navbar-nav
              li
                a(href="/book") Ãšltimos libros
              if user
                li
                  form(class="form-inline" action="/logout?_method=DELETE" method="POST")
                    input(type="submit" value="Cerrar sesion" class="btn btn-link fake-link")
              else
                li
                  a(href="/login") Iniciar sesion
                li
                  a(href="/signup") Crear cuenta


    .container
      block body

    //-
      Client-side Templates
      ========================

      HTML templates are important prerequisites of modern, rich client applications.
      To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
      that you load these templates client-side.

      By default, your Gruntfile is configured to automatically load and precompile
      client-side JST templates in your `assets/templates` folder, then
      include them here automatically (between TEMPLATES and TEMPLATES END).

      To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Import templates from other directories
          + Use a different template engine (handlebars, jade, dust, etc.)
          + Internationalize your client-side templates using a server-side
            stringfile before they're served.

    // TEMPLATES
    
    // TEMPLATES END

    //-
      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    // SCRIPTS
    script(src="/js/dependencies/sails.io.js")
    script(src="/js/vendor/jquery.js")
    script(src="/js/vendor/bootstrap.js")
    // SCRIPTS END

